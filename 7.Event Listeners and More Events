Event Listeners and More Events 
1. Event Listeners

JavaScript offers three ways to add an Event Listener to a DOM element.

    1.Inline event listeners
    2.onevent listeners
    3.addEventListener()

1.1 Inline event listeners 

HTML

<button onclick="greeting()">Greet</button> 

CSS

function greeting() {
  console.log("Hi Rahul");
}


1.2 onevent listeners

HTML

<button id="greetBtn">Greet</button>

CSS

let greetBtnEl = document.getElementById("greetBtn");

greetBtnEl.onclick = function() {
  console.log("Hi Rahul");
};


1.3 addEventListener()

It is a modern approach to add an event listener.

Syntax: element.addEventListener(event, function);

element - HTML element
event - event name
function - Callback function


<button id="greetBtn">Greet</button>

let greetBtn = document.getElementById("greetBtn");

greetBtn.addEventListener("click", function() {
  console.log("Hi Rahul");
});




2. Operators
2.1 Comparison Operators

Operator	                       Usage	                                         Description

Equal ( == )	                  a == b	                                         returns true if both a and b values are equal.
Not equal ( != )	              a != b	                                         returns true if both a and b values are not equal.

Strict equal ( === )	         a === b	                                         returns true if both a and b values are equal and of the same type.

Strict not equal ( !== )	     a !== b	                                         returns true if either a and b values are not equal or of the different type.

Greater than ( > )	           a > b	                                           returns true if a value is greater than b value.

Greater than or equal ( >= )	 a >= b	                                       returns true if a value is greater than or equal to b value.

Less than ( < )	              a < b	                                         returns true if a value is less than b value.

Less than or equal ( <= )	    a <= b	                                           returns true if a value is less than or equal to b value.



2.2 Logical Operators

Operator	   Usage	                    Description
AND ( && )	  a && b	            returns true if both a and b values are true.
OR ( | | )	  a | | b	            returns true if either a or b value is true.
NOT ( ! )	    !a	                returns true if a value is not true.


3. More Events

Events are the actions by which the user or browser interact with HTML elements.

There are different types of events.

    Keyboard Events
    Mouse Events
    Touch Events, and many more.

3.1 Keyboard Events

Keyboard Event is the user interaction with the keyboard.

The keyboard events are

    1.keydown
    2.keyup

3.1.1 Keydown event

The keydown event occurs when a key on the keyboard is pressed.

Syntax: element.addEventListener("keydown", function);


let inputEl = document.createElement("input");

function printKeydown() {
  console.log("key pressed");
}

inputEl.addEventListener("keydown", printKeydown);
document.body.appendChild(inputEl);



3.1.2 Keyup event

The keyup
 event occurs when a key on the keyboard is released.

Syntax: element.addEventListener("keyup", function);
3.2 Event Object

Whenever an event happens, the browser creates an event object.

It consists of information about the event that has happened.

It consists of many properties and methods.

    type
    target
    key
    timeStamp
    stopPropagation
    , and many more.

3.2.1 Properties & Methods

For any event, event-specific properties and methods will be present.

For Example,

The keydown event has key property, whereas the onclick event doesn't have it.

event.type:-The event.type property contains the type of event occurred like click, keydown, etc.


let inputEl = document.createElement("input");

function printKeydown(event) {
  console.log(event.type);  // keydown
}

inputEl.addEventListener("keydown", printKeydown);
document.body.appendChild(inputEl);



event.target:-The event.target property contains the HTML element that triggered the event.

Let inputElement = document.createElement("input");

function printKeydown(event) {
  console.log(event.target);  // <input></input>
}

inputElement.addEventListener("keydown", printKeydown);
document.body.appendChild(inputElement);



event.key:-The event.key property contains the value of the key pressed by the user.

let inputElement = document.createElement("input");

function printKeydown(event) {
  console.log(event.key);
}

inputElement.addEventListener("keydown", printKeydown);
document.body.appendChild(inputElement);


Keyboard key	event.key value
Enter	Enter
a	     a
A	    A
1   	1
*	    *
<	    <

EXAMPLE:-

 



************JS

let timerEl = document.getElementById("timer");
let defuserEl = document.getElementById("defuser");
let countdown = 10;

let intervalId = setInterval(function() {
  countdown = countdown - 1;
  timerEl.textContent = countdown;
  if (countdown === 0) {
    timerEl.textContent = "BOOM";
    clearInterval(intervalId);
  }
}, 1000);

defuserEl.addEventListener("keydown", function(event) {
  let bombDefuserText = defuserEl.value;
  if (event.key === "Enter" && bombDefuserText === "defuse" && countdown !== 0) {
    timerEl.textContent = "You did it!";
    clearInterval(intervalId);
  }
});




************HTML



<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous" />
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV" crossorigin="anonymous"></script>
  </head>
  <body>
    <div class="timer-container">
      <input type="text" class="user-input" id="defuser" />
      <br />
      <img src="https://d1tgh8fmlzexmh.cloudfront.net/ccbp-dynamic-webapps/time-bomb-img.png" class="bomb-image"/>
      <p class="timer-display" id="timer">10</p>
    </div>
  </body>
</html>



************CSS



@import url("https://fonts.googleapis.com/css2?family=Bree+Serif&family=Monoton&family=Open+Sans:wght@400;700&family=Playfair+Display+SC:wght@400;700&family=Playfair+Display:wght@400;700&family=Roboto:wght@400;700&family=Source+Sans+Pro:wght@400;700&family=Work+Sans:wght@400;700&display=swap");

.timer-container {
  text-align: center;
  background-color: #00bafc;
  height: 100vh;
  padding: 20px;
}

.timer-display {
  color: white;
  font-size: 50px;
}

.user-input {
  text-align: center;
  border-width: 0px;
  border-radius: 4px;
  padding: 6px;
}

.bomb-image {
  width: 150px;
  margin-top: 40px;
}








